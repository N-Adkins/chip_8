pub struct Memory {
    data: [u8; 0xFFF],
}

impl Memory {

    pub fn new() -> Memory {
        
        let mut data: [u8; 0xFFF] = [0; 0xFFF];

        let font_set: [u8; 80] = [
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F
        ];
        
        for i in 0..80 {
            data[0x50 + i] = font_set[i];
        }

        Memory {
            data,
        }

    }

    pub fn read_u8(&self, address: u16) -> u8 {
        self.data[address as usize]
    }

    pub fn read_u16(&self, address: u16) -> u16 {
        // Big endian so first byte goes in top 8 bits
        ((self.data[address as usize] as u16) << 8) | (self.data[(address + 1) as usize]) as u16
    }

    pub fn set_u8(&mut self, address: u16, value: u8) {
        self.data[address as usize] = value;
    }

    pub fn load_rom(&mut self, data: &Vec<u8>) {
        if 0x200 + data.len() <= 0xFFF {
            self.data[0x200..(0x200 + data.len())].copy_from_slice(&data);
        } else {
            panic!("Failed to road ROM: File too large");
        }
    }

}
